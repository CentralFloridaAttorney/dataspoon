# -*- coding: utf-8 -*-
"""SOM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Qd72k2xntZ0F49e8zn4ox9IOZcnWwTBk

#Self Organizing Map

##Install MiniSom Package
"""

# !pip install MiniSom

"""### Importing the libraries"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

"""## Importing the dataset"""
covidData = "/home/overlordx/IntelliJIDEAProjects/DataMachine/src/main/resources/storage/testCovidData.csv"
covidDataFormat = {
    "case_month": "string",
    "res_state": "string",
    "state_fips_code": "string",
    "res_county": "string",
    "county_fips_code": "string",
    "age_group": "string",
    "sex": "string",
    "race": "string",
    "ethnicity": "string",
    "case_positive_specimen_interval": "string",
    "case_onset_interval": "string",
    "process": "string",
    "exposure_yn": "string",
    "current_status": "string",
    "symptom_status": "string",
    "hosp_yn": "string",
    "icu_yn": "string",
    "death_yn": "string",
    "underlying_conditions_yn": "string"
}
covidDictionary = frozenset(covidDataFormat.items())

creditCardData = "/home/overlordx/IdeaProjects/Crawler/src/main/resources/Credit_Card_Applications.csv"
dataset = pd.read_csv(creditCardData)

X = dataset.iloc[:, :-1].values
y = dataset.iloc[:, -1].values

"""## Feature Scaling"""

from sklearn.preprocessing import MinMaxScaler

sc = MinMaxScaler(feature_range=(0, 1))
X = sc.fit_transform(X)

"""##Training the SOM"""

from minisom import MiniSom

som = MiniSom(x=10, y=10, input_len=15, sigma=1.0, learning_rate=0.5)
som.random_weights_init(X)
som.train_random(data=X, num_iteration=100)

"""##Visualizing the results"""

from pylab import bone, pcolor, colorbar, plot, show

bone()
pcolor(som.distance_map().T)
colorbar()
markers = ["o", "s"]
colors = ["r", "g"]
for i, x in enumerate(X):
    w = som.winner(x)
    plot(w[0] + 0.5,
         w[1] + 0.5,
         markers[y[i]],
         markeredgecolor=colors[y[i]],
         markerfacecolor="None",
         markersize=10,
         markeredgewidth=2)
show()

"""## Finding the frauds"""

mappings = som.win_map(X)
frauds = np.concatenate((mappings[(1, 1)], mappings[(4, 1)]), axis=0)
frauds = sc.inverse_transform(frauds)

"""##Printing the Fraunch Clients"""

print("Fraud Customer IDs")
for i in frauds[:, 0]:
    print(int(i))
